name: Milestone Celebrations

on:
  schedule:
    - cron: '0 12 * * *'  # Daily at noon
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-milestones:
    runs-on: ubuntu-latest
    env:
      TZ: 'America/New_York'  # Eastern Time
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Check and Celebrate Milestones
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            // Fetch user stats
            const { data: user } = await github.rest.users.getByUsername({
              username: context.repo.owner
            });
            
            const { data: repos } = await github.rest.repos.listForUser({
              username: context.repo.owner,
              per_page: 100
            });
            
            // Calculate total stars
            let totalStars = 0;
            for (const repo of repos) {
              totalStars += repo.stargazers_count;
            }
            
            // Load milestone history
            const historyFile = '.github/milestones/history.json';
            let history = {};
            try {
              if (fs.existsSync(historyFile)) {
                history = JSON.parse(fs.readFileSync(historyFile, 'utf8'));
              }
            } catch (e) {
              console.log('No history file found, creating new one');
            }
            
            // Define milestones
            const milestones = [
              { id: 'repos_10', value: repos.length, threshold: 10, message: 'üéâ 10 Repositories Created!' },
              { id: 'repos_25', value: repos.length, threshold: 25, message: 'üöÄ 25 Repositories Created!' },
              { id: 'repos_50', value: repos.length, threshold: 50, message: 'üí´ 50 Repositories Created!' },
              { id: 'repos_100', value: repos.length, threshold: 100, message: 'üèÜ 100 Repositories Created!' },
              { id: 'stars_50', value: totalStars, threshold: 50, message: '‚≠ê 50 Total Stars!' },
              { id: 'stars_100', value: totalStars, threshold: 100, message: 'üåü 100 Total Stars!' },
              { id: 'stars_500', value: totalStars, threshold: 500, message: '‚ú® 500 Total Stars!' },
              { id: 'stars_1000', value: totalStars, threshold: 1000, message: 'üå† 1000 Total Stars!' },
              { id: 'followers_50', value: user.followers, threshold: 50, message: 'üë• 50 Followers!' },
              { id: 'followers_100', value: user.followers, threshold: 100, message: 'üéä 100 Followers!' },
              { id: 'followers_500', value: user.followers, threshold: 500, message: 'üé™ 500 Followers!' },
            ];
            
            // Check for new milestones
            const newMilestones = [];
            for (const milestone of milestones) {
              if (milestone.value >= milestone.threshold && !history[milestone.id]) {
                newMilestones.push(milestone);
                history[milestone.id] = {
                  achieved: new Date().toLocaleString('en-US', { timeZone: 'America/New_York' }),
                  value: milestone.value
                };
              }
            }
            
            // Save updated history
            if (!fs.existsSync('.github/milestones')) {
              fs.mkdirSync('.github/milestones', { recursive: true });
            }
            fs.writeFileSync(historyFile, JSON.stringify(history, null, 2));
            
            // Celebrate new milestones
            if (newMilestones.length > 0) {
              // Create celebration issue
              const celebrationBody = `
            # üéä Milestone Achievement Unlocked! üéä
            
            Congratulations! You've reached the following milestone(s):
            
            ${newMilestones.map(m => `## ${m.message}\n- Current value: ${m.value}\n- Achieved on: ${new Date().toLocaleDateString()}`).join('\n\n')}
            
            ---
            
            Keep up the amazing work! üöÄ
            
            <details>
            <summary>Your Achievement Stats</summary>
            
            - Total Repositories: ${repos.length}
            - Total Stars: ${totalStars}
            - Followers: ${user.followers}
            - Public Gists: ${user.public_gists}
            
            </details>
            `;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üéâ Milestone${newMilestones.length > 1 ? 's' : ''} Achieved!`,
                body: celebrationBody,
                labels: ['milestone', 'celebration']
              });
              
              // Update README with achievement badges
              const readmeContent = fs.readFileSync('README.md', 'utf8');
              const achievementSection = `
            <!-- Achievements Start -->
            ### üèÜ Recent Achievements
            ${newMilestones.map(m => `- ${m.message}`).join('\n')}
            <!-- Achievements End -->
              `;
              
              // Add to README if section doesn't exist
              if (!readmeContent.includes('<!-- Achievements Start -->')) {
                // Add after the header or at the end
                const updatedReadme = readmeContent.replace(
                  /(# .*\n)/,
                  `$1\n${achievementSection}\n`
                );
                fs.writeFileSync('README.md', updatedReadme);
              }
            }
            
            console.log(`Checked ${milestones.length} milestones, found ${newMilestones.length} new achievements`);

  generate-achievement-badges:
    needs: check-milestones
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate Achievement Badges
        run: |
          mkdir -p .github/milestones/badges
          
          # Read milestone history
          if [ -f ".github/milestones/history.json" ]; then
            # Generate SVG badges for achievements
            node -e "
            const fs = require('fs');
            const history = JSON.parse(fs.readFileSync('.github/milestones/history.json', 'utf8'));
            
            // Create achievement showcase
            const achievements = Object.entries(history).map(([id, data]) => {
              const [type, number] = id.split('_');
              return {
                type: type.charAt(0).toUpperCase() + type.slice(1),
                number: number,
                date: new Date(data.achieved).toLocaleDateString()
              };
            });
            
            // Generate markdown for achievements
            const markdown = achievements.map(a => 
              \`![](https://img.shields.io/badge/\${a.type}-\${a.number}-gold?style=for-the-badge)\`
            ).join(' ');
            
            fs.writeFileSync('.github/milestones/badges/showcase.md', markdown);
            "
          fi
      
      - name: Commit achievement updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --quiet && git diff --staged --quiet || git commit -m "üèÜ Update achievements [skip ci]"
          git push