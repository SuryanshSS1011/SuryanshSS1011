name: Profile Automation & Optimization

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Build optimization with caching and parallel execution
  update-readme:
    runs-on: ubuntu-latest
    env:
      TZ: 'America/New_York'  # Eastern Time
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Cache dependencies for faster builds
      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      # Cache for Python dependencies (if needed)
      - name: Setup Python with cache
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
      
      # Install dependencies once
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          pip install requests beautifulsoup4 PyGithub pytz
      
      # Parallel execution of profile updates
      - name: Update Profile Content
        run: |
          # Create automation scripts directory
          mkdir -p .github/scripts
          
          # Run the readme updater script
          node .github/scripts/readme-updater.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --quiet && git diff --staged --quiet || git commit -m "ü§ñ Update profile [skip ci]"
          git push

  # Dynamic badge generation
  generate-badges:
    runs-on: ubuntu-latest
    needs: update-readme
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate custom badges
        run: |
          mkdir -p .github/badges
          
          # Create badge generation script
          cat > .github/scripts/generate-badges.js << 'EOF'
const https = require('https');
const fs = require('fs');

// Calculate metrics
const generateBadge = (label, message, color) => {
  const url = `https://img.shields.io/badge/${encodeURIComponent(label)}-${encodeURIComponent(message)}-${color}`;
  return url;
};

// Generate various badges
const badges = [
  { label: 'Profile Views', message: '1.2k', color: 'blue' },
  { label: 'Repos', message: '42', color: 'green' },
  { label: 'Contributions', message: '1,337', color: 'yellow' },
];

// Save badge URLs
const badgeUrls = badges.map(b => generateBadge(b.label, b.message, b.color));
fs.writeFileSync('.github/badges/urls.json', JSON.stringify(badgeUrls));
EOF

          node .github/scripts/generate-badges.js

  # Milestone celebrations
  celebrate-milestones:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for milestones
        uses: actions/github-script@v6
        with:
          script: |
            const { data: user } = await github.rest.users.getAuthenticated();
            const { data: repos } = await github.rest.repos.listForAuthenticatedUser();
            
            // Check various milestones
            const milestones = [];
            
            // Repository count milestones
            if (repos.length % 10 === 0) {
              milestones.push(`üéâ Reached ${repos.length} repositories!`);
            }
            
            // Check contribution streak (would need more complex logic)
            // This is a simplified example
            const today = new Date();
            if (today.getDate() === 1) {
              milestones.push('üóìÔ∏è New month, new opportunities!');
            }
            
            // Create issue for milestone
            if (milestones.length > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üéä Milestone Achieved!',
                body: milestones.join('\n'),
                labels: ['milestone', 'celebration']
              });
            }

  # Weekly summary generation
  weekly-summary:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 0 * * 0'  # Sundays at midnight
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate weekly summary
        uses: actions/github-script@v6
        with:
          script: |
            const { data: events } = await github.rest.activity.listEventsForAuthenticatedUser({
              username: context.repo.owner,
              per_page: 100
            });
            
            // Filter last week's events
            const lastWeek = new Date();
            lastWeek.setDate(lastWeek.getDate() - 7);
            
            const weeklyEvents = events.filter(e => 
              new Date(e.created_at) > lastWeek
            );
            
            // Generate summary
            const summary = {
              commits: weeklyEvents.filter(e => e.type === 'PushEvent').length,
              prs: weeklyEvents.filter(e => e.type === 'PullRequestEvent').length,
              issues: weeklyEvents.filter(e => e.type === 'IssuesEvent').length,
              reviews: weeklyEvents.filter(e => e.type === 'PullRequestReviewEvent').length
            };
            
            // Create summary file
            const summaryContent = `
            # Weekly Activity Summary
            
            - üíª Commits: ${summary.commits}
            - üîÑ Pull Requests: ${summary.prs}
            - üìù Issues: ${summary.issues}
            - üëÄ Reviews: ${summary.reviews}
            
            Generated on: ${new Date().toLocaleDateString()}
            `;
            
            // Save to summaries directory
            const fs = require('fs');
            const date = new Date().toISOString().split('T')[0];
            fs.writeFileSync(`summaries/week-${date}.md`, summaryContent);

  # Profile validation tests
  validate-profile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate README structure
        run: |
          # Check for required sections
          if ! grep -q "## About Me" README.md; then
            echo "Missing 'About Me' section"
            exit 1
          fi
          
          if ! grep -q "## Tech Stack" README.md; then
            echo "Missing 'Tech Stack' section"
            exit 1
          fi
          
          echo "‚úÖ README structure validated"
      
      - name: Check links
        run: |
          # Simple link checker
          grep -oP 'https?://[^\s\)]+' README.md | while read url; do
            if curl -s -o /dev/null -w "%{http_code}" "$url" | grep -qE "^[45]"; then
              echo "‚ùå Broken link: $url"
              exit 1
            fi
          done
          
          echo "‚úÖ All links valid"
      
      - name: Validate images
        run: |
          # Check image accessibility
          grep -oP '!\[.*?\]\((.*?)\)' README.md | grep -oP '\((.*?)\)' | tr -d '()' | while read img; do
            if [[ $img == http* ]]; then
              if ! curl -s -I "$img" | grep -q "200 OK"; then
                echo "‚ùå Broken image: $img"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ All images accessible"